generator client {
  provider = "prisma-client-js"

  output = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                 @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String              @unique
  password         String
  address          String?
  gender           String?
  birthDate        DateTime?
  role             Role                @default(USER)
  profilePicture   String?
  createdAt        DateTime            @default(now())
  quizSubmissions  QuizSubmission[]
  createdCourses   Course[]            @relation("CreatedCourses")
  assessments      Assessment[]
  enrollments      Enrollment[]
  progress         CourseProgress[]
  payments         Payment[]
  roadmaps         UserRoadmap[]
  certificates     Certificate[]
  cvReviews        CVReview[]
  jobMatches       JobMatch[]
  sessions         CounselingSession[] @relation("UserSession")
  chatMessages     ChatMessage[]       @relation("SenderMessage")
  counselor        Counselor?
  notifications    Notification[]
  lessonProgress   LessonProgress[]
  resetToken       String?
  resetTokenExpiry DateTime?

  @@map("users")
}

enum Role {
  USER
  CONSULTANT
}

model Assessment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  studentStatus   String
  majorStudy      String
  currentSemester String
  currentField    String
  interestedField String
  dreamJob        String
  mainGoal        String
  createdAt       DateTime @default(now())
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  thumbnail   String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  isPaid      Boolean
  price       Int
  createdBy   User     @relation("CreatedCourses", fields: [createdById], references: [id])

  createdById    Int
  createdAt      DateTime         @default(now())
  quizSubmission QuizSubmission[]
  payments       Payment[]
  videos         CourseVideo[]
  quizzes        Quiz[]
  enrollments    Enrollment[]
  progress       CourseProgress[]
  certificates   Certificate[]
  roadmapCourses RoadmapCourse[]
  lesson         Lesson[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model CourseVideo {
  id       Int     @id @default(autoincrement())
  course   Course  @relation(fields: [courseId], references: [id])
  courseId Int
  title    String
  videoUrl String
  isLocked Boolean
  order    Int
}

model Quiz {
  id             Int              @id @default(autoincrement())
  course         Course           @relation(fields: [courseId], references: [id])
  courseId       Int
  question       String
  options        Json
  correctAnswer  String
  isLocked       Boolean
  quizSubmission QuizSubmission[]
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())
  isPaid     Boolean
  paymentId  Int?
  payment    Payment? @relation(fields: [paymentId], references: [id])
}

model CourseProgress {
  id                  Int     @id @default(autoincrement())
  user                User    @relation(fields: [userId], references: [id])
  userId              Int
  course              Course  @relation(fields: [courseId], references: [id])
  courseId            Int
  completedVideoCount Int
  completedQuizCount  Int
  isCompleted         Boolean
}

model QuizSubmission {
  id             Int      @id @default(autoincrement())
  userId         Int
  courseId       Int
  quizId         Int
  answers        Json // Jawaban yang diberikan oleh user
  score          Int // Skor yang didapat
  totalQuestions Int // Total jumlah soal
  isPassed       Boolean // Apakah lulus atau tidak
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  course         Course   @relation(fields: [courseId], references: [id])
  quiz           Quiz     @relation(fields: [quizId], references: [id])
}

model Lesson {
  id       Int              @id @default(autoincrement())
  title    String
  courseId Int
  course   Course           @relation(fields: [courseId], references: [id])
  content  String
  order    Int
  progress LessonProgress[]
}

model LessonProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  lessonId    Int
  isCompleted Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId]) // supaya 1 user cuma bisa 1 record per lesson
}

model Payment {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  courseId      Int?
  roadmapId     Int?
  enrollment    Enrollment[]
  course        Course?      @relation(fields: [courseId], references: [id])
  roadmap       Roadmap?     @relation(fields: [roadmapId], references: [id])
  amount        Int
  paymentStatus String
  status        String
  paidAt        DateTime
  createdAt     DateTime     @default(now())
}

model Roadmap {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  rewardVoucher  String
  roadmapCourses RoadmapCourse[]
  userRoadmaps   UserRoadmap[]
  payments       Payment[]
}

model RoadmapCourse {
  id        Int     @id @default(autoincrement())
  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  order     Int //menentukan urutan course dalam roadmap
}

model UserRoadmap {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  roadmap    Roadmap   @relation(fields: [roadmapId], references: [id])
  roadmapId  Int
  isUnlocked Boolean
  unlockedAt DateTime?
}

model Certificate {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  course   Course   @relation(fields: [courseId], references: [id])
  courseId Int
  filePath String
  issuedAt DateTime
}

model Counselor {
  id             Int                 @id @default(autoincrement())
  user           User                @relation(fields: [userId], references: [id])
  userId         Int                 @unique
  specialization String
  bio            String
  verified       Boolean
  sessions       CounselingSession[] @relation("ConsultantSession")
}

model CounselingSession {
  id          Int           @id @default(autoincrement())
  user        User          @relation("UserSession", fields: [userId], references: [id])
  userId      Int
  counselor   Counselor     @relation("ConsultantSession", fields: [counselorId], references: [id])
  counselorId Int
  topic       String
  question    String
  response    String?
  status      String
  createdAt   DateTime      @default(now())
  rating      Int?
  feedback    String?
  messages    ChatMessage[]
}

model ChatMessage {
  id        Int               @id @default(autoincrement())
  session   CounselingSession @relation(fields: [sessionId], references: [id])
  sessionId Int
  sender    User              @relation("SenderMessage", fields: [senderId], references: [id])
  senderId  Int
  message   String
  sentAt    DateTime          @default(now())
}

model CVReview {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  cvFilePath     String
  cvVersion      Int
  reviewResult   String
  relevanceScore Int
  feedback       String
  createdAt      DateTime @default(now())
}

model JobMatch {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  cvFilePath  String
  matchedJobs Json
  generatedAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  type      String
}
