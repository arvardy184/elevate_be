
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  address: 'address',
  gender: 'gender',
  birthDate: 'birthDate',
  role: 'role',
  profilePicture: 'profilePicture',
  createdAt: 'createdAt',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry'
};

exports.Prisma.RoadmapMatcherScalarFieldEnum = {
  id: 'id',
  keyword: 'keyword',
  roadmapId: 'roadmapId',
  matchField: 'matchField'
};

exports.Prisma.AssessmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentStatus: 'studentStatus',
  majorStudy: 'majorStudy',
  currentSemester: 'currentSemester',
  createdAt: 'createdAt',
  currentField: 'currentField',
  dreamJob: 'dreamJob',
  interestedField: 'interestedField',
  mainGoal: 'mainGoal'
};

exports.Prisma.BookmarkCourseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  filePath: 'filePath',
  issuedAt: 'issuedAt'
};

exports.Prisma.ChatmessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  senderId: 'senderId',
  message: 'message',
  sentAt: 'sentAt'
};

exports.Prisma.CounselingsessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  counselorId: 'counselorId',
  topic: 'topic',
  question: 'question',
  response: 'response',
  status: 'status',
  createdAt: 'createdAt',
  rating: 'rating',
  feedback: 'feedback'
};

exports.Prisma.CounselorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialization: 'specialization',
  bio: 'bio',
  verified: 'verified'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  categoryId: 'categoryId',
  isPaid: 'isPaid',
  price: 'price',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.CourseprogressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  completedVideoCount: 'completedVideoCount',
  completedQuizCount: 'completedQuizCount',
  isCompleted: 'isCompleted'
};

exports.Prisma.CoursevideoScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  title: 'title',
  videoUrl: 'videoUrl',
  isLocked: 'isLocked',
  order: 'order',
  s3Key: 's3Key'
};

exports.Prisma.CvreviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cvFilePath: 'cvFilePath',
  cvVersion: 'cvVersion',
  reviewResult: 'reviewResult',
  relevanceScore: 'relevanceScore',
  feedback: 'feedback',
  createdAt: 'createdAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  isPaid: 'isPaid',
  paymentId: 'paymentId'
};

exports.Prisma.JobmatchScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cvFilePath: 'cvFilePath',
  matchedJobs: 'matchedJobs',
  generatedAt: 'generatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  courseId: 'courseId',
  content: 'content',
  order: 'order'
};

exports.Prisma.LessonprogressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  isCompleted: 'isCompleted',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  type: 'type'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  roadmapId: 'roadmapId',
  amount: 'amount',
  paymentStatus: 'paymentStatus',
  status: 'status',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  orderId: 'orderId',
  snapToken: 'snapToken'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  question: 'question',
  options: 'options',
  correctAnswer: 'correctAnswer',
  isLocked: 'isLocked'
};

exports.Prisma.QuizsubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  quizId: 'quizId',
  answers: 'answers',
  score: 'score',
  totalQuestions: 'totalQuestions',
  isPassed: 'isPassed',
  createdAt: 'createdAt'
};

exports.Prisma.RoadmapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rewardVoucher: 'rewardVoucher'
};

exports.Prisma.RoadmapcourseScalarFieldEnum = {
  id: 'id',
  roadmapId: 'roadmapId',
  courseId: 'courseId',
  order: 'order'
};

exports.Prisma.UserroadmapScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roadmapId: 'roadmapId',
  isUnlocked: 'isUnlocked',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discount: 'discount',
  expiresAt: 'expiresAt',
  userId: 'userId',
  isUsed: 'isUsed'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  address: 'address',
  gender: 'gender',
  profilePicture: 'profilePicture',
  resetToken: 'resetToken'
};

exports.Prisma.RoadmapMatcherOrderByRelevanceFieldEnum = {
  keyword: 'keyword',
  matchField: 'matchField'
};

exports.Prisma.assessmentOrderByRelevanceFieldEnum = {
  studentStatus: 'studentStatus',
  majorStudy: 'majorStudy',
  currentSemester: 'currentSemester',
  currentField: 'currentField',
  dreamJob: 'dreamJob',
  interestedField: 'interestedField',
  mainGoal: 'mainGoal'
};

exports.Prisma.categoryOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.certificateOrderByRelevanceFieldEnum = {
  filePath: 'filePath'
};

exports.Prisma.chatmessageOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.counselingsessionOrderByRelevanceFieldEnum = {
  topic: 'topic',
  question: 'question',
  response: 'response',
  status: 'status',
  feedback: 'feedback'
};

exports.Prisma.counselorOrderByRelevanceFieldEnum = {
  specialization: 'specialization',
  bio: 'bio'
};

exports.Prisma.courseOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail'
};

exports.Prisma.coursevideoOrderByRelevanceFieldEnum = {
  title: 'title',
  videoUrl: 'videoUrl',
  s3Key: 's3Key'
};

exports.Prisma.cvreviewOrderByRelevanceFieldEnum = {
  cvFilePath: 'cvFilePath',
  reviewResult: 'reviewResult',
  feedback: 'feedback'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.jobmatchOrderByRelevanceFieldEnum = {
  cvFilePath: 'cvFilePath'
};

exports.Prisma.lessonOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content'
};

exports.Prisma.notificationOrderByRelevanceFieldEnum = {
  message: 'message',
  type: 'type'
};

exports.Prisma.paymentOrderByRelevanceFieldEnum = {
  paymentStatus: 'paymentStatus',
  status: 'status',
  orderId: 'orderId',
  snapToken: 'snapToken'
};

exports.Prisma.quizOrderByRelevanceFieldEnum = {
  question: 'question',
  correctAnswer: 'correctAnswer'
};

exports.Prisma.roadmapOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  rewardVoucher: 'rewardVoucher'
};

exports.Prisma.VoucherOrderByRelevanceFieldEnum = {
  code: 'code'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  CONSULTANT: 'CONSULTANT'
};

exports.Prisma.ModelName = {
  User: 'User',
  RoadmapMatcher: 'RoadmapMatcher',
  assessment: 'assessment',
  BookmarkCourse: 'BookmarkCourse',
  category: 'category',
  certificate: 'certificate',
  chatmessage: 'chatmessage',
  counselingsession: 'counselingsession',
  counselor: 'counselor',
  course: 'course',
  courseprogress: 'courseprogress',
  coursevideo: 'coursevideo',
  cvreview: 'cvreview',
  enrollment: 'enrollment',
  jobmatch: 'jobmatch',
  lesson: 'lesson',
  lessonprogress: 'lessonprogress',
  notification: 'notification',
  payment: 'payment',
  quiz: 'quiz',
  quizsubmission: 'quizsubmission',
  roadmap: 'roadmap',
  roadmapcourse: 'roadmapcourse',
  userroadmap: 'userroadmap',
  Voucher: 'Voucher'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
